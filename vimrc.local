autocmd BufWritePre * StripWhitespace
set hlsearch

set textwidth=0

colorscheme elflord
" hi Search cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
highlight! link Visual CursorLine
hi CursorLine cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white


set rnu!

" invisible characters settings
set nolist listchars=tab:»-,trail:·,eol:¬


" easy motion
noremap <leader><Leader>/ :set hlsearch!<CR>
nnoremap <leader><leader><leader>/ :let @/ = ""<CR>
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap <leader><leader>s <Plug>(easymotion-overwin-f2)

" Move to line
map <leader><Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader><leader> l <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

map <leader><Leader>L <Plug>(easymotion-lineforward)
map <leader><leader>J <plug>(easymotion-j)
map <leader><leader>K <plug>(easymotion-k)
map <leader><leader>H <plug>(easymotion-linebackward)


" undotree setting
if has("persistent_undo")
  set undodir=~/.undodir/
  set undofile
endif

"write current file as sudo
cmap w!! w !sudo tee > /dev/null %

" accidental undo in insert mode
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

"set default clipboard for tmux compatibility
" set clipboard=unnamedplus

" hilight current column
" set cursorcolumn

" set status line to display current file full path
set statusline+=%F

set rtp+=/usr/local/opt/fzf
" cmap fd fd --type f


" Neovim settings
let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'

" vim airline
let g:airline_theme='raven'
let g:airline#extensions#tabline#enabled = 0


" elm formatting
let g:elm_format_autosave = 1
command -nargs=? -complete=file ElmMake call elm#Make(<f-args>)
command ElmMakeMain call elm#Make("Main.elm")
command -nargs=? -complete=file ElmTest call elm#Test(<f-args>)
command ElmRepl call elm#Repl()
command ElmErrorDetail call elm#ErrorDetail()
command ElmShowDocs call elm#ShowDocs()
command ElmBrowseDocs call elm#BrowseDocs()
command ElmFormat call elm#Format()

augroup format_elm " {
  autocmd BufWritePost *.elm silent execute "ElmFormat"
augroup END " }

" find and replace
command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'css': ['stylelint'],
\   'less': ['stylelint'],
\}

nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunctio


" postcss autoprefixer command
command AutoPref ! postcss --no-map --use autoprefixer --autoprefixer.browsers "last 2 versions,> 1%, ie >= 9" % -o %


" vim yank highlight
map y <Plug>(highlightedyank)

" switch to current directory
" set autochdir
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>

" vim Grepper
nnoremap <Leader>* :Grepper -cword -noprompt<CR>

" search for the current selection
nmap gs <Plug>(GrepperOperator)
xmap gs <Plug>(GrepperOperator)

" automatically reload files changed on disk
set autoread

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Add this to your vimrc to provide a shortcut
nnoremap <leader>ri :RunInInteractiveShell<space>

nnoremap <M-h> <c-w>h
nnoremap <M-j> <c-w>j
nnoremap <M-k> <c-w>k
nnoremap <M-l> <c-w>l
if has('nvim')
  tnoremap <M-h> <c-\><c-n><c-w>h
  tnoremap <M-j> <c-\><c-n><c-w>j
  tnoremap <M-k> <c-\><c-n><c-w>k
  tnoremap <M-l> <c-\><c-n><c-w>l
endif

" neovim only
if has('nvim')
  " nvim live substitution
  set inccommand=split
  " remap escape terminal
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>
endif

" Use deoplete.
let g:deoplete#enable_at_startup = 1

" disable vim polyglot default elm plugin
let g:polyglot_disabled = ['elm']

" vim-markdown settings
set conceallevel=0
let vim_markdown_preview_github=1
